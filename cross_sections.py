import numpy as np
from scipy.interpolate import interp1d


class DDn3He:

    '''Legendre-tabulated DD->n3He'''

# Es in MeV

    Es = np.array([ \
        0.0, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, \
        0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.1, 1.2, 1.3, \
        1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, \
        3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0], dtype=np.float32)

    leg_coeff = np.array([ \
        [0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.819, 0.   , 0.181, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.785, 0.   , 0.215, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.758, 0.   , 0.241, 0.   , 0.001, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.737, 0.   , 0.261, 0.   , 0.002, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.719, 0.   , 0.279, 0.   , 0.002, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.705, 0.   , 0.292, 0.   , 0.003, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.692, 0.   , 0.304, 0.   , 0.004, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.681, 0.   , 0.314, 0.   , 0.005, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.671, 0.   , 0.323, 0.   , 0.006, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.633, 0.   , 0.356, 0.   , 0.011, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.605, 0.   , 0.379, 0.   , 0.016, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.583, 0.   , 0.395, 0.   , 0.022, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.564, 0.   , 0.408, 0.   , 0.028, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.547, 0.   , 0.418, 0.   , 0.035, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.532, 0.   , 0.426, 0.   , 0.042, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.518, 0.   , 0.433, 0.   , 0.049, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.506, 0.   , 0.437, 0.   , 0.057, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.494, 0.   , 0.440, 0.   , 0.066, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.483, 0.   , 0.443, 0.   , 0.074, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.474, 0.   , 0.444, 0.   , 0.082, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.465, 0.   , 0.445, 0.   , 0.090, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.456, 0.   , 0.446, 0.   , 0.098, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.447, 0.   , 0.445, 0.   , 0.108, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.439, 0.   , 0.444, 0.   , 0.117, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.432, 0.   , 0.443, 0.   , 0.125, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.425, 0.   , 0.441, 0.   , 0.134, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ], \
        [0.418, 0.   , 0.439, 0.   , 0.142, 0.   , 0.001, 0.   , 0.   , 0.   , 0.   ], \
        [0.405, 0.   , 0.434, 0.   , 0.158, 0.   , 0.003, 0.   , 0.   , 0.   , 0.   ], \
        [0.393, 0.   , 0.428, 0.   , 0.174, 0.   , 0.005, 0.   , 0.   , 0.   , 0.   ], \
        [0.381, 0.   , 0.422, 0.   , 0.189, 0.   , 0.008, 0.   , 0.   , 0.   , 0.   ], \
        [0.370, 0.   , 0.416, 0.   , 0.203, 0.   , 0.011, 0.   , 0.   , 0.   , 0.   ], \
        [0.360, 0.   , 0.410, 0.   , 0.216, 0.   , 0.014, 0.   , 0.   , 0.   , 0.   ], \
        [0.351, 0.   , 0.404, 0.   , 0.228, 0.   , 0.017, 0.   , 0.   , 0.   , 0.   ], \
        [0.342, 0.   , 0.398, 0.   , 0.240, 0.   , 0.020, 0.   , 0.   , 0.   , 0.   ], \
        [0.334, 0.   , 0.392, 0.   , 0.251, 0.   , 0.023, 0.   , 0.   , 0.   , 0.   ], \
        [0.326, 0.   , 0.387, 0.   , 0.260, 0.   , 0.027, 0.   , 0.   , 0.   , 0.   ], \
        [0.318, 0.   , 0.382, 0.   , 0.270, 0.   , 0.030, 0.   , 0.   , 0.   , 0.   ], \
        [0.311, 0.   , 0.377, 0.   , 0.279, 0.   , 0.033, 0.   , 0.   , 0.   , 0.   ], \
        [0.304, 0.   , 0.372, 0.   , 0.287, 0.   , 0.037, 0.   , 0.   , 0.   , 0.   ], \
        [0.298, 0.   , 0.367, 0.   , 0.294, 0.   , 0.041, 0.   , 0.   , 0.   , 0.   ], \
        [0.293, 0.   , 0.362, 0.   , 0.301, 0.   , 0.044, 0.   , 0.   , 0.   , 0.   ], \
        [0.287, 0.   , 0.357, 0.   , 0.308, 0.   , 0.048, 0.   , 0.   , 0.   , 0.   ], \
        [0.282, 0.   , 0.353, 0.   , 0.314, 0.   , 0.051, 0.   , 0.   , 0.   , 0.   ], \
        [0.277, 0.   , 0.349, 0.   , 0.320, 0.   , 0.054, 0.   , 0.   , 0.   , 0.   ], \
        [0.272, 0.   , 0.345, 0.   , 0.326, 0.   , 0.057, 0.   , 0.   , 0.   , 0.   ], \
        [0.268, 0.   , 0.341, 0.   , 0.331, 0.   , 0.060, 0.   , 0.   , 0.   , 0.   ], \
        [0.262, 0.   , 0.337, 0.   , 0.337, 0.   , 0.064, 0.   , 0.   , 0.   , 0.   ], \
        [0.240, 0.   , 0.322, 0.   , 0.356, 0.   , 0.082, 0.   , 0.   , 0.   , 0.   ], \
        [0.221, 0.   , 0.308, 0.   , 0.367, 0.   , 0.098, 0.   , 0.004, 0.   , 0.002], \
        [0.206, 0.   , 0.295, 0.   , 0.372, 0.   , 0.112, 0.   , 0.012, 0.   , 0.003], \
        [0.192, 0.   , 0.284, 0.   , 0.374, 0.   , 0.125, 0.   , 0.020, 0.   , 0.005], \
        [0.182, 0.   , 0.274, 0.   , 0.374, 0.   , 0.137, 0.   , 0.027, 0.   , 0.006], \
        [0.174, 0.   , 0.265, 0.   , 0.373, 0.   , 0.148, 0.   , 0.032, 0.   , 0.008], \
        [0.168, 0.   , 0.257, 0.   , 0.370, 0.   , 0.159, 0.   , 0.037, 0.   , 0.009], \
        [0.163, 0.   , 0.250, 0.   , 0.366, 0.   , 0.169, 0.   , 0.042, 0.   , 0.010], \
        [0.159, 0.   , 0.244, 0.   , 0.362, 0.   , 0.178, 0.   , 0.046, 0.   , 0.011], \
        [0.156, 0.   , 0.239, 0.   , 0.358, 0.   , 0.187, 0.   , 0.049, 0.   , 0.011], \
        [0.153, 0.   , 0.234, 0.   , 0.354, 0.   , 0.195, 0.   , 0.052, 0.   , 0.012], \
        [0.150, 0.   , 0.230, 0.   , 0.350, 0.   , 0.202, 0.   , 0.055, 0.   , 0.013], \
        [0.148, 0.   , 0.227, 0.   , 0.346, 0.   , 0.209, 0.   , 0.056, 0.   , 0.014], \
        [0.147, 0.   , 0.224, 0.   , 0.342, 0.   , 0.215, 0.   , 0.058, 0.   , 0.014] \
        ], dtype=np.float32)

    Bg  = 31.3970
    A   = np.array([5.3701e+4, 3.3027e+2, -1.2706e-1, 2.9327e-5, -2.5151e-9], dtype=np.float32)
    B   = np.zeros(4, dtype=np.float32)
    Ahi = np.zeros(5, dtype=np.float32)
    Bhi = np.zeros(4, dtype=np.float32)
    loHiBound      = 4.7
    BoschLiskBound = 4.7
    x = np.linspace(4., 10., 13, dtype=np.float32)
    y = np.array([99.2, 97.7, 96.4, 95.1, 93.9, 92.7, 91.5, 90.5, 89.5, 88.6, 87.7, 86.8, 86.0], dtype=np.float32)



class DT:

    '''Legendre-tabulated DT cross-section'''

# Es in MeV

    Es = np.array([ \
        0.0, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, \
        1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, \
        2.8, 2.9, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0], \
        dtype=np.float32)

    leg_coeff = np.array([\
        [1.   , 0.   ,  0.   ,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [1.   , 0.   ,  0.   ,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.999, 0.004, -0.003,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.998, 0.013, -0.011,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.997, 0.021, -0.018,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.995, 0.030, -0.025,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.993, 0.038, -0.031,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.989, 0.046, -0.035,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.986, 0.053, -0.039,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.983, 0.060, -0.043,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.978, 0.067, -0.045,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.973, 0.072, -0.045,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.968, 0.077, -0.045,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.963, 0.081, -0.045,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.957, 0.087, -0.044,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.946, 0.094, -0.040,  0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.931, 0.100, -0.032,  0.   , 0.001, 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.915, 0.105, -0.023,  0.   , 0.003, 0.   , 0.   , 0.   , 0.   , 0.   , 0.0], \
        [0.898, 0.110, -0.013,  0.   , 0.004, 0.   , 0.001, 0.   , 0.   , 0.   , 0.0], \
        [0.878, 0.113,  0.002,  0.   , 0.005, 0.   , 0.002, 0.   , 0.   , 0.   , 0.0], \
        [0.858, 0.116,  0.016,  0.   , 0.007, 0.001, 0.002, 0.   , 0.   , 0.   , 0.0], \
        [0.835, 0.120,  0.029,  0.001, 0.008, 0.004, 0.003, 0.   , 0.   , 0.   , 0.0], \
        [0.814, 0.122,  0.042,  0.002, 0.009, 0.007, 0.004, 0.   , 0.   , 0.   , 0.0], \
        [0.793, 0.124,  0.054,  0.004, 0.011, 0.010, 0.004, 0.   , 0.   , 0.   , 0.0], \
        [0.771, 0.127,  0.067,  0.005, 0.012, 0.013, 0.005, 0.   , 0.   , 0.   , 0.0], \
        [0.749, 0.129,  0.080,  0.007, 0.013, 0.016, 0.006, 0.   , 0.   , 0.   , 0.0], \
        [0.730, 0.130,  0.091,  0.009, 0.014, 0.019, 0.007, 0.   , 0.   , 0.   , 0.0], \
        [0.707, 0.132,  0.104,  0.012, 0.016, 0.022, 0.007, 0.   , 0.   , 0.   , 0.0], \
        [0.688, 0.132,  0.115,  0.015, 0.017, 0.025, 0.008, 0.   , 0.   , 0.   , 0.0], \
        [0.666, 0.133,  0.127,  0.019, 0.018, 0.028, 0.009, 0.   , 0.   , 0.   , 0.0], \
        [0.646, 0.133,  0.137,  0.023, 0.020, 0.031, 0.010, 0.   , 0.   , 0.   , 0.0], \
        [0.627, 0.132,  0.148,  0.027, 0.021, 0.034, 0.011, 0.   , 0.   , 0.   , 0.0], \
        [0.608, 0.131,  0.159,  0.031, 0.022, 0.037, 0.012, 0.   , 0.   , 0.   , 0.0], \
        [0.589, 0.130,  0.169,  0.034, 0.024, 0.040, 0.014, 0.   , 0.   , 0.   , 0.0], \
        [0.571, 0.130,  0.180,  0.037, 0.025, 0.042, 0.015, 0.   , 0.   , 0.   , 0.0], \
        [0.490, 0.126,  0.223,  0.051, 0.031, 0.057, 0.022, 0.   , 0.   , 0.   , 0.0], \
        [0.426, 0.123,  0.256,  0.058, 0.037, 0.071, 0.029, 0.   , 0.   , 0.   , 0.0], \
        [0.384, 0.119,  0.268,  0.062, 0.043, 0.087, 0.037, 0.   , 0.   , 0.   , 0.0], \
        [0.359, 0.115,  0.264,  0.064, 0.051, 0.103, 0.044, 0.   , 0.   , 0.   , 0.0], \
        [0.343, 0.111,  0.248,  0.063, 0.060, 0.120, 0.052, 0.002, 0.001, 0.   , 0.0], \
        [0.328, 0.107,  0.231,  0.059, 0.073, 0.134, 0.061, 0.004, 0.003, 0.   , 0.0], \
        [0.314, 0.101,  0.214,  0.050, 0.089, 0.149, 0.071, 0.007, 0.005, 0.   , 0.0], \
        [0.302, 0.094,  0.202,  0.039, 0.102, 0.162, 0.080, 0.011, 0.008, 0.   , 0.0], \
        [0.291, 0.087,  0.192,  0.026, 0.114, 0.173, 0.090, 0.016, 0.011, 0.   , 0.0], \
        [0.280, 0.080,  0.184,  0.013, 0.124, 0.183, 0.101, 0.021, 0.014, 0.   , 0.0], \
        [0.271, 0.072,  0.178,  0.001, 0.132, 0.190, 0.112, 0.027, 0.017, 0.   , 0.0], \
        [0.263, 0.065,  0.173, -0.010, 0.138, 0.194, 0.124, 0.033, 0.020, 0.   , 0.0], \
        [0.254, 0.057,  0.170, -0.019, 0.142, 0.197, 0.136, 0.040, 0.023, 0.   , 0.0], \
        [0.246, 0.048,  0.167, -0.027, 0.143, 0.198, 0.151, 0.047, 0.027, 0.   , 0.0] \
        ], dtype=np.float32)

    Bg = 34.3827
    A   = np.array([6.927e+4, 7.454e+8, 2.050e+6, 5.2002e+4, 0.0], dtype=np.float32)
    B   = np.array([6.38e+1, -9.95e-1, 6.981e-5, 1.728e-4], dtype=np.float32)
    Ahi = np.array([-1.4714e+6, 0.0, 0.0, 0.0, 0.0], dtype=np.float32)
    Bhi = np.array([-8.4127e-3, 4.7983e-6, -1.0748e-9, 8.5184e-14], dtype=np.float32)
    loHiBound      = 0.530
    BoschLiskBound = 4.7

    x = np.linspace(4., 10., 13, dtype=np.float32)
    y = np.array([81.2, 81.8, 81.9, 80.8, 77.9, 73.9, 68.5, 63.8, 59.5, 56.0, 53.0, 50.4, 48.4], dtype=np.float32)


def legendre_diff(E_in_MeV, mu_in, reac='dt'):

    from scipy.special import legendre, eval_legendre

    if reac == 'dt':
        cs = DT
    elif reac == 'dd':
        cs = DDn3He
    n_leg = cs.leg_coeff.shape[1]
    data = interp1d(cs.Es, cs.leg_coeff, axis=0)
    cs_leg = eval_legendre(range(n_leg), mu_in)
    cs_sum = np.sum(cs_leg*data(E_in_MeV))

    return legendre_tot(E_in_MeV, reac=reac)*cs_sum/(4*np.pi*data(E_in_MeV)[0])


def legendre_tot(E_in_MeV, Emin_MeV=5.e-4, reac='dt'):

    if reac == 'dt':
        cs = DT
    elif reac == 'dd':
        cs = DDn3He

    if E_in_MeV < Emin_MeV:
        return 0
    if E_in_MeV < cs.BoschLiskBound:
        E_keV = 1e3*E_in_MeV
        if E_in_MeV <= cs.loHiBound:
            num  =  cs.A[0] + E_keV*(cs.A[1] + E_keV*(cs.A[2] + E_keV*(cs.A[3] + E_keV*cs.A[4])))
            den1 =       1. + E_keV*(cs.B[0] + E_keV*(cs.B[1] + E_keV*(cs.B[2] + E_keV*cs.B[3])))
        else:
            num  =  cs.Ahi[0] + E_keV*(cs.Ahi[1] + E_keV*(cs.Ahi[2] + E_keV*(cs.Ahi[3] + E_keV*cs.Ahi[4])))
            den1 =         1. + E_keV*(cs.Bhi[0] + E_keV*(cs.Bhi[1] + E_keV*(cs.Bhi[2] + E_keV*cs.Bhi[3])))
        den2 = E_keV * np.exp(cs.Bg/np.sqrt(E_keV))
        return num/(den1*den2) # millibarn
    else:
        return np.interp(E_in_MeV, cs.x, cs.y)


if __name__ == '__main__':

    import matplotlib.pylab as plt

# Cross-sections

# Total - correct, page 9 of ControlRoom manual!
    E = 0.5
    reac = 'dt' # 'dt'
    dttot = legendre_tot(E, reac=reac)
    print('DT tot cross-section for E=%8.4f MeV:' %E)
    print('%12.4e millibarn' %dttot)

# Differential - correct, page 9 of ControlRoom manual!
    E = 1
    mu = -1
    print('DT tot cross-section for E=%8.4f MeV, mu=%6.3f:' %(E, mu))
    dt_diff = legendre_diff(E, mu)
    print('%12.4e millibarn' %dt_diff)

    theta = np.linspace(0, np.pi, 31)
    mu_grid = np.cos(theta)
    cs_theta = []
    for mu in mu_grid:
        cs_theta.append(legendre_diff(E, mu, reac=reac))

    plt.figure('Cross-section', (11, 9))
    plt.title('%s cross-section(theta)' %reac)
    plt.plot(theta, cs_theta)
    plt.show()
